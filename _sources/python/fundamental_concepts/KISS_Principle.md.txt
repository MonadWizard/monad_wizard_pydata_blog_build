# KISS Low-Level Design

The KISS principle, or "Keep It Simple, Stupid," advocates for simplicity in software design. The idea is that systems work best when they are kept simple rather than made complex. By focusing on simplicity, the code becomes easier to read, maintain, and debug.

## Why KISS is Important

1. **Readability**: Simple code is easier to understand, making it more accessible for other developers (or your future self) to read and maintain.
2. **Maintainability**: Less complex code is easier to modify, update, or refactor.
3. **Debugging**: Simpler systems are easier to test and debug, reducing the chances of introducing bugs.
4. **Efficiency**: Simple code tends to have fewer dependencies and perform better due to fewer operations.

## Principles of KISS in Low-Level Design

1. **Avoid Over-Engineering**: Focus on solving the problem at hand without adding unnecessary features.
2. **Break Down Complex Problems**: Split complex problems into smaller, manageable pieces.
3. **Use Clear and Concise Naming**: Choose meaningful and straightforward names for variables, functions, and classes.
4. **Favor Composition Over Inheritance**: Use composition to build complex functionality by combining simple, focused objects rather than creating deep inheritance hierarchies.
5. **YAGNI (You Aren't Gonna Need It)**: Avoid adding features or code until they are actually needed.

## Example: A Simple User Authentication System

Below is an example of applying the KISS principle to a simple user authentication system.

### Problem

We need to create a simple user authentication system where users can sign up and log in.

### Solution

Let's break it down into the simplest possible implementation:

1. **Sign Up**: Store a user's username and password securely.
2. **Log In**: Verify the username and password during login.

### Python Implementation

```python
import hashlib
import uuid

class UserAuth:
    def __init__(self):
        self.users = {}  # A simple dictionary to store users

    def hash_password(self, password: str) -> str:
        """Generate a hashed password with a unique salt."""
        salt = uuid.uuid4().hex
        return hashlib.sha256(salt.encode() + password.encode()).hexdigest() + ':' + salt

    def check_password(self, stored_password: str, provided_password: str) -> bool:
        """Check if the provided password matches the stored password."""
        password, salt = stored_password.split(':')
        return password == hashlib.sha256(salt.encode() + provided_password.encode()).hexdigest()

    def sign_up(self, username: str, password: str) -> bool:
        """Sign up a new user with a username and password."""
        if username in self.users:
            print(f"User {username} already exists!")
            return False
        self.users[username] = self.hash_password(password)
        print(f"User {username} signed up successfully!")
        return True

    def log_in(self, username: str, password: str) -> bool:
        """Log in a user by verifying their username and password."""
        stored_password = self.users.get(username)
        if not stored_password:
            print(f"User {username} not found!")
            return False
        if self.check_password(stored_password, password):
            print(f"User {username} logged in successfully!")
            return True
        print("Incorrect password!")
        return False

# Example Usage
auth = UserAuth()
auth.sign_up("user1", "password123")
auth.log_in("user1", "password123")
auth.log_in("user1", "wrongpassword")
auth.sign_up("user1", "newpassword")  # This should fail
```


### Explanation

- `Hashing Passwords:` Instead of storing plain text passwords, we hash them with a unique salt for security.
- `Sign Up:` The `sign_up` method checks if a username already exists, then stores the hashed password.
- `Log In:` The `log_in` method verifies the username exists and checks the password against the stored hash.

### Why is This KISS?

* `Simple Data Structure:` A dictionary (`self.users`) is used to store user data, which is straightforward and easy to manage.
* `Minimal Functionality:` The code implements only the necessary featuresâ€”no over-complicated designs or unnecessary features.
* `Clear Methods:` Each method has a single responsibility, making the code easy to understand and maintain.




